const answerTrackerContainer = document.querySelector(".answers-tracker");
const options=document.querySelector(".options").children;
const questionNumberSpan = document.querySelector(".question-num-value");
const totalQuestionSpan = document.querySelector(".total-question");
const correctAnswerSpan = document.querySelector(".correct-answers");
const totalQuestionSpan2 = document.querySelector(".total-question2");
const percentage= document.querySelector(".percentage");
const question= document.querySelector(".question");

const op1=document.querySelector(".option1");
const op2=document.querySelector(".option2");
const op3=document.querySelector(".option3");
const op4=document.querySelector(".option4");
let questionIndex=1;
let index=0;
let myArray=[];
let myArr=[];
let score=0;
//questions and options and answers

const questions=[
{
	q:' Logical data independence: Refers to the separation of the external views from the conceptual view',
	options:['True ','False',' ',' '],
	answer:0
},

{
	q:'Conceptual data modeling uses a high level data modeling concept of E-R Models  ',
	options:['True ','False',' ',' '],
	answer:0
},

{
	q:'The problem that is compounded when constraints involve several data items from different files are Called __________________ ',
	options:['Security Problem ','Transaction Control Management Problem ','Integrity Problem','All of the above'],
	answer:2
},

{
	q:'A traditional database stores just data â€“ with no procedures ',
	options:['False ','True',' ',' '],
	answer:1
},

{
	q:'__________________denote derived attributes. ',
	options:['Double ellipse ','Dashed ellipse','Squared ellipse','Ellipse with attribute name underlined '],
	answer:1
},


{
	q:'Cardinality specifies how many instances of an entity relate to one instance of another entity. ',
	options:['False ','True',' ',' '],
	answer:1
},


{
	q:'All   primary keys should be super keys. ',
	options:['False ','True',' ',' '],
	answer:1
},



{
	q:'Simple Attribute  composed of multiple components, each with an independent existence.',
	options:['False ','True',' ',' '],
	answer:1
},




{
	q:'__________________  stores metadata about the structure of the data base ',
	options:['Physical data base ','Query Interpreter','Database Engine','None of the above'],
	answer:3
},




{
	q:'__________________engine executes low level instructions generated by the DML compilier',
	options:['DDL Analyzer ','Query Analyzer','Data Catalog','Data Dictionary'],
	answer:3
},




{
	q:'A __________________ is an association between entities',
	options:['Relation','One to One ','Generalization ','	Specialization '],
	answer:0
},




{
	q:'__________________is the minimal super key ',
	options:['Candidate Key','Primary Key','Unique Key','Alternate Key '],
	answer:0
},



{
	q:'__________________is a collection of operations that perform s single logical function in  a database application  ',
	options:['Concurrent operation ','Durability','Transaction','Atomocity '],
	answer:2
},

{
	q:' Conceptual data model is the source of   information   for logical design phase',
	options:['True','False',' ', ' '],
	answer:0
}
]

//set Questions an opotions and question number


totalQuestionSpan.innerHTML=questions.length;
function load(){
	questionNumberSpan.innerHTML=index+1;
	question.innerHTML=questions[questionIndex].q;
	op1.innerHTML=questions[questionIndex].options[0];
	op2.innerHTML=questions[questionIndex].options[1];
	op3.innerHTML=questions[questionIndex].options[2];
	op4.innerHTML=questions[questionIndex].options[3];
	index++;

}

function check(element){

	//now let us check option is correct or not
	//console.log(element.id);
	if(element.id==questions[questionIndex].answer)
	{
		element.classList.add("correct");
		//console.log("correct")
		updateAnswerTracker("correct")
		score++;
	}
	else{
		element.classList.add("wrong");
		//console.log("wrong")
		//if user selected one option then disabled all options
		updateAnswerTracker("wrong")
	}
	disabledOptions()
}

function disabledOptions(){
	for(let i=0;i<options.length;i++){
		options[i].classList.add("disabled");
		
		if (options[i].id==questions[questionIndex].answer) {
			options[i].classList.add("correct");
		}
	}
}


function enabledOptions(){
	//here we did disabled all options for next question we have to enable again options
	for(let i=0;i<options.length;i++)
	{
		options[i].classList.remove("disabled","correct","wrong");
	}
}

function validate(){
	if(!options[0].classList.contains("disabled")){
		alert("Please Select One Option Please");
	}
	else{
		enabledOptions();
		randomQuestion();
	}
}


function next(){
	//before going to next questions let us check that did user select any option or not if user did not select any option then alert("Please select one option") else next question .
	validate();

}

//now let us check questions duplicy

//But we need random questions for that 
function randomQuestion(){
	let randomNumber = Math.floor(Math.random()*questions.length);
	let hitDuplicate=0;
	if(index==questions.length){
		quizOver();

	}
	else{
		if(myArray.length>0){
			for(let i=0;i<myArray.length;i++){
				if(myArray[i]==randomNumber){
					hitDuplicate=1;
					break;
					//if myArray[item] equal to randomNumberthen hitDuplicate found then hitDuplicate=1 and break
				}

			}
			// if hitduplicate found then call again to randomquestion()
			if (hitDuplicate==1) {
				randomQuestion();
			}
			else{
				questionIndex=randomNumber;
				load();
				myArr.push(questionIndex);
			}

		}
		if(myArray.length==0)
		{
			questionIndex=randomNumber;
			load();
			myArr.push(questionIndex);
		}
	
	
	myArray.push(randomNumber);
	
	}
}


function answerTracker(){
	for(let i=3;i<questions.length;i++){
		const div = document.createElement("div")
		answerTrackerContainer.appendChild(div);
	}
}
function updateAnswerTracker(className){
	answerTrackerContainer.children[index-1].classList.add(className);
}

function quizOver(){
	document.querySelector(".quiz-over").classList.add("show");
	correctAnswerSpan.innerHTML=score;
	totalQuestionSpan2.innerHTML=questions.length;
	percentage.innerHTML=(score/questions.length)*100 + "%";
}
function tryAgain() {
	window.location.reload();
}
window.onload=function(){
	randomQuestion();
	answerTracker();
}
